function clrout=mknd2clr(model,mode);
% mknd2clr...........convert model from ND format into CLR format
%
% call: clrout=mknd2clr(model,mode);
%
%           model: model struture as returned by MKREADND
%
%           mode: string defining the type of polynomials to be generated.
%                 The folloqing modes are available:
%                 'constant': velocity is kept constant between the depths
%                          defined in the MODEL structure
%                 DEFAULT: 'constant'
%
% result: clrout: CLR structure as returned by MKREADCLR
%
% This routine converts models in discrete depth-velocity representation
% into models in continuous polynomial representation.
% 
% Martin Knapmeyer, 13.06.2005


%%% construct input for MKMAT2CLR
%%% construction of layer data is independent of construction of
%%% discontinuity data. Only the layer data is mode dependent.
%%% Three steps procedure:
%%% 1. construct layer data
%%% 2. construct discontinuity data
%%% 3. construct some auxiliary information

%%% now do it!
%%% 1. construct layer data
mode=lower(mode);
switch mode
    case {'constant'}
         %%% layers with constant velocities are quite simple: they reach
         %%% from one depth sample to the next and have only one parameter
         layeranz=length(model.z); % number of layers in model
         if model.z~=model.rp
            %%% there is no "layer" at the planets center. We have to
            %%% invent one to be able to fdefine the lowermost layer's
            %%% parameters
            model.z=[model.z model.rp];
            model.vp=[model.vp model.vp(end)];
            model.vs=[model.vs model.vs(end)];
            model.qp=[model.qp model.qp(end)];
            model.qs=[model.qs model.qs(end)];
            model.rho=[model.rho model.rho(end)];
            layeranz=layeranz+1;
         end; % if model.z~=model.radius
         z=zeros(layeranz,2);
         vp=zeros(layeranz,1);
         vs=zeros(layeranz,1);
         rho=zeros(layeranz,1);
         qp=zeros(layeranz,1);
         qs=zeros(layeranz,1);
         layercnt=1;
         for indy=1:layeranz-1
             if model.z(indy)~=model.z(indy+1)
                 %%% if these two depths were equal, the two lines would
                 %%% define a discontinuity, not a layer!
                 z(layercnt,1)=model.z(indy);
                 z(layercnt,2)=model.z(indy+1);
                 vp(layercnt)=model.vp(indy);
                 vs(layercnt)=model.vs(indy);
                 rho(layercnt)=model.rho(indy);
                 qp(layercnt)=model.qp(indy);
                 qs(layercnt)=model.qs(indy);
                 layercnt=layercnt+1;
             end; % if model.z(indy)~=model.z(indy+1)
         end; % for indy
    otherwise
        error(['MKND2CLR: unknown mode ' mode]);
end; % switch mode
%%% There might be layers with all parameters zero at the end of the lists.
%%% These need to be removed.
if layercnt<layeranz
    %%% this means that there are indeed some "empty" layers
    layercnt=layercnt-1;
    z=z(1:layercnt,:);
    vp=vp(1:layercnt);
    vs=vs(1:layercnt);
    rho=rho(1:layercnt);
    qp=qp(1:layercnt);
    qs=qs(1:layercnt);
end; % if layercnt<layeranz
%%% 2. construct discontinuity data
%%%    For standard discontinuities, use TTBOX standard names!
dz=[];
dname='';
%%% 2a standard discontinuities
dz=[dz model.conr];
dz=[dz model.moho];
dz=[dz model.d410];
dz=[dz model.d520];
dz=[dz model.d660];
dz=[dz model.cmb];
dz=[dz model.icb];
dname=strvcat(dname,...
              'Conrad',...
              'Moho',...
              'olivine alpha beta',...
              'olivine beta gamma',...
              'olivine gamma perovskite',...
              'outer core',...
              'inner core');
%%% 2b Non-Standard Discontinuities
dz=[dz model.dz];
dname=strvcat(dname,model.dname);
%%% 3. construct some auxiliary information
name=model.name;
planet='Planet_Name_not_given!';
rp=model.rp;
year=model.year;


%%% call MKMAT2CLR to do the final formatting
tag=['// generated by MKND2CLR in ' mode ' mode.'];
clrout=mkmat2clr(tag,name,year,planet,rp,z,vp,vs,rho,qp,qs,dz,dname);
